#pragma version 9

txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp call_OptIn

NOT_IMPLEMENTED:
	err

abi_route_deposit:
	// no dupn needed
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert
	callsub deposit
	int 1
	return

deposit:
	proto 1 0

	// contracts/flash-loan.algo.ts:10
	// assert(payment.receiver === this.app.address)
	frame_dig -1 // payment: pay
	gtxns Receiver
	txna Applications 0
	app_params_get AppAddress
	assert
	==
	assert

	// contracts/flash-loan.algo.ts:11
	// this.deposited(this.txn.sender).value = this.deposited(this.txn.sender).value
	txn Sender
	byte "deposited"
	txn Sender
	byte "deposited"
	app_local_get
	frame_dig -1 // payment: pay
	gtxns Amount
	+
	app_local_put
	retsub

abi_route_withdraw:
	// no dupn needed
	txna ApplicationArgs 1
	btoi
	callsub withdraw
	int 1
	return

withdraw:
	proto 1 0

	// contracts/flash-loan.algo.ts:16
	// this.deposited(this.txn.sender).value = this.deposited(this.txn.sender).value
	txn Sender
	byte "deposited"
	txn Sender
	byte "deposited"
	app_local_get
	frame_dig -1 // amount: uint64
	-
	app_local_put

	// contracts/flash-loan.algo.ts:18
	// sendPayment({
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/flash-loan.algo.ts:19
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/flash-loan.algo.ts:20
	// amount: amount
	frame_dig -1 // amount: uint64
	itxn_field Amount

	// contracts/flash-loan.algo.ts:21
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

abi_route_closeOutOfApplication:
	// no dupn needed
	callsub closeOutOfApplication
	int 1
	return

closeOutOfApplication:
	proto 0 0

	// if0_condition
	// contracts/flash-loan.algo.ts:26
	// this.deposited(this.txn.sender).exists
	txn Sender
	txna Applications 0
	byte "deposited"
	app_local_get_ex
	swap
	pop
	bz if0_end

	// if0_consequent
	// contracts/flash-loan.algo.ts:27
	// sendPayment({
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/flash-loan.algo.ts:28
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/flash-loan.algo.ts:29
	// amount: this.deposited(this.txn.sender).value
	txn Sender
	byte "deposited"
	app_local_get
	itxn_field Amount

	// contracts/flash-loan.algo.ts:30
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

if0_end:
	retsub

abi_route_openFlashLoan:
	// no dupn needed
	txna ApplicationArgs 1
	btoi
	callsub openFlashLoan
	int 1
	return

openFlashLoan:
	proto 1 0

	// contracts/flash-loan.algo.ts:36
	// assert(this.txn.groupIndex === 0)
	txn GroupIndex
	int 0
	==
	assert

	// contracts/flash-loan.algo.ts:37
	// assert(this.txnGroup[this.txnGroup.length - 1].typeEnum === TransactionType.ApplicationCall)
	global GroupSize
	int 1
	-
	gtxns TypeEnum
	int appl
	==
	assert

	// contracts/flash-loan.algo.ts:38
	// assert(this.txnGroup[this.txnGroup.length - 1].applicationID === globals.currentApplicationID)
	global GroupSize
	int 1
	-
	gtxns ApplicationID
	global CurrentApplicationID
	==
	assert

	// contracts/flash-loan.algo.ts:39
	// assert(this.txnGroup[this.txnGroup.length - 1].applicationArgs[0] === method('closeFlashLoan(pay)void'))
	global GroupSize
	int 1
	-
	gtxns ApplicationArgs 0
	method "closeFlashLoan(pay)void"
	==
	assert

	// contracts/flash-loan.algo.ts:41
	// sendPayment({
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/flash-loan.algo.ts:42
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/flash-loan.algo.ts:43
	// amount: amount
	frame_dig -1 // amount: uint64
	itxn_field Amount

	// contracts/flash-loan.algo.ts:44
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

abi_route_closeFlashLoan:
	// no dupn needed
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert
	callsub closeFlashLoan
	int 1
	return

closeFlashLoan:
	proto 1 0

	// contracts/flash-loan.algo.ts:49
	// assert(this.txn.groupIndex === this.txnGroup.length - 1)
	txn GroupIndex
	global GroupSize
	int 1
	-
	==
	assert

	// contracts/flash-loan.algo.ts:50
	// assert(this.txnGroup[0].typeEnum === TransactionType.ApplicationCall)
	int 0
	gtxns TypeEnum
	int appl
	==
	assert

	// contracts/flash-loan.algo.ts:51
	// assert(this.txnGroup[0].applicationID === globals.currentApplicationID)
	int 0
	gtxns ApplicationID
	global CurrentApplicationID
	==
	assert

	// contracts/flash-loan.algo.ts:52
	// assert(this.txnGroup[0].applicationArgs[0] === method('openFlashLoan(uint64)void'))
	int 0
	gtxns ApplicationArgs 0
	method "openFlashLoan(uint64)void"
	==
	assert

	// contracts/flash-loan.algo.ts:54
	// assert(repay.receiver === this.app.address)
	frame_dig -1 // repay: pay
	gtxns Receiver
	txna Applications 0
	app_params_get AppAddress
	assert
	==
	assert

	// contracts/flash-loan.algo.ts:55
	// assert(repay.amount === btoi(this.txnGroup[0].applicationArgs[1]))
	frame_dig -1 // repay: pay
	gtxns Amount
	int 0
	gtxns ApplicationArgs 1
	btoi
	==
	assert
	retsub

abi_route_defaultTEALScriptCreate:
	int 1
	return

create_NoOp:
	txn NumAppArgs
	bz abi_route_defaultTEALScriptCreate
	err

call_NoOp:
	method "deposit(pay)void"
	method "withdraw(uint64)void"
	method "closeOutOfApplication()void"
	method "openFlashLoan(uint64)void"
	method "closeFlashLoan(pay)void"
	txna ApplicationArgs 0
	match abi_route_deposit abi_route_withdraw abi_route_closeOutOfApplication abi_route_openFlashLoan abi_route_closeFlashLoan
	err

call_OptIn:
	method "deposit(pay)void"
	txna ApplicationArgs 0
	match abi_route_deposit
	err